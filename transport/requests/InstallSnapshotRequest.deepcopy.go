// Code generated by deep-copy -o InstallSnapshotRequest.deepcopy.go --pointer-receiver --type InstallSnapshotRequest .; DO NOT EDIT.

package requests

import (
	"github.com/dhiaayachi/raft"
)

// DeepCopy generates a deep copy of *InstallSnapshotRequest
func (o *InstallSnapshotRequest) DeepCopy() *InstallSnapshotRequest {
	var cp InstallSnapshotRequest = *o
	if o.InstallSnapshotRequest != nil {
		cp.InstallSnapshotRequest = new(raft.InstallSnapshotRequest)
		*cp.InstallSnapshotRequest = *o.InstallSnapshotRequest
		if o.InstallSnapshotRequest.RPCHeader.ID != nil {
			cp.InstallSnapshotRequest.RPCHeader.ID = make([]byte, len(o.InstallSnapshotRequest.RPCHeader.ID))
			copy(cp.InstallSnapshotRequest.RPCHeader.ID, o.InstallSnapshotRequest.RPCHeader.ID)
		}
		if o.InstallSnapshotRequest.RPCHeader.Addr != nil {
			cp.InstallSnapshotRequest.RPCHeader.Addr = make([]byte, len(o.InstallSnapshotRequest.RPCHeader.Addr))
			copy(cp.InstallSnapshotRequest.RPCHeader.Addr, o.InstallSnapshotRequest.RPCHeader.Addr)
		}
		if o.InstallSnapshotRequest.RPCHeader.Meta != nil {
			cp.InstallSnapshotRequest.RPCHeader.Meta = make(map[string]any, len(o.InstallSnapshotRequest.RPCHeader.Meta))
			for k5, v5 := range o.InstallSnapshotRequest.RPCHeader.Meta {
				cp.InstallSnapshotRequest.RPCHeader.Meta[k5] = v5
			}
		}
		if o.InstallSnapshotRequest.Leader != nil {
			cp.InstallSnapshotRequest.Leader = make([]byte, len(o.InstallSnapshotRequest.Leader))
			copy(cp.InstallSnapshotRequest.Leader, o.InstallSnapshotRequest.Leader)
		}
		if o.InstallSnapshotRequest.Peers != nil {
			cp.InstallSnapshotRequest.Peers = make([]byte, len(o.InstallSnapshotRequest.Peers))
			copy(cp.InstallSnapshotRequest.Peers, o.InstallSnapshotRequest.Peers)
		}
		if o.InstallSnapshotRequest.Configuration != nil {
			cp.InstallSnapshotRequest.Configuration = make([]byte, len(o.InstallSnapshotRequest.Configuration))
			copy(cp.InstallSnapshotRequest.Configuration, o.InstallSnapshotRequest.Configuration)
		}
	}
	return &cp
}
