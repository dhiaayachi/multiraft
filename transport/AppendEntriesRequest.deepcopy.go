// Code generated by deep-copy -o AppendEntriesRequest.deepcopy.go --pointer-receiver --type AppendEntriesRequest .; DO NOT EDIT.

package transport

import (
	"github.com/hashicorp/raft"
)

// DeepCopy generates a deep copy of *AppendEntriesRequest
func (o *AppendEntriesRequest) DeepCopy() *AppendEntriesRequest {
	var cp AppendEntriesRequest = *o
	if o.AppendEntriesRequest != nil {
		cp.AppendEntriesRequest = new(raft.AppendEntriesRequest)
		*cp.AppendEntriesRequest = *o.AppendEntriesRequest
		if o.AppendEntriesRequest.RPCHeader.ID != nil {
			cp.AppendEntriesRequest.RPCHeader.ID = make([]byte, len(o.AppendEntriesRequest.RPCHeader.ID))
			copy(cp.AppendEntriesRequest.RPCHeader.ID, o.AppendEntriesRequest.RPCHeader.ID)
		}
		if o.AppendEntriesRequest.RPCHeader.Addr != nil {
			cp.AppendEntriesRequest.RPCHeader.Addr = make([]byte, len(o.AppendEntriesRequest.RPCHeader.Addr))
			copy(cp.AppendEntriesRequest.RPCHeader.Addr, o.AppendEntriesRequest.RPCHeader.Addr)
		}
		if o.AppendEntriesRequest.RPCHeader.Meta != nil {
			cp.AppendEntriesRequest.RPCHeader.Meta = make(map[string]interface{}, len(o.AppendEntriesRequest.RPCHeader.Meta))
			for k5, v5 := range o.AppendEntriesRequest.RPCHeader.Meta {
				cp.AppendEntriesRequest.RPCHeader.Meta[k5] = v5
			}
		}
		if o.AppendEntriesRequest.Leader != nil {
			cp.AppendEntriesRequest.Leader = make([]byte, len(o.AppendEntriesRequest.Leader))
			copy(cp.AppendEntriesRequest.Leader, o.AppendEntriesRequest.Leader)
		}
		if o.AppendEntriesRequest.Entries != nil {
			cp.AppendEntriesRequest.Entries = make([]*raft.Log, len(o.AppendEntriesRequest.Entries))
			copy(cp.AppendEntriesRequest.Entries, o.AppendEntriesRequest.Entries)
			for i4 := range o.AppendEntriesRequest.Entries {
				if o.AppendEntriesRequest.Entries[i4] != nil {
					cp.AppendEntriesRequest.Entries[i4] = new(raft.Log)
					*cp.AppendEntriesRequest.Entries[i4] = *o.AppendEntriesRequest.Entries[i4]
					if o.AppendEntriesRequest.Entries[i4].Data != nil {
						cp.AppendEntriesRequest.Entries[i4].Data = make([]byte, len(o.AppendEntriesRequest.Entries[i4].Data))
						copy(cp.AppendEntriesRequest.Entries[i4].Data, o.AppendEntriesRequest.Entries[i4].Data)
					}
					if o.AppendEntriesRequest.Entries[i4].Extensions != nil {
						cp.AppendEntriesRequest.Entries[i4].Extensions = make([]byte, len(o.AppendEntriesRequest.Entries[i4].Extensions))
						copy(cp.AppendEntriesRequest.Entries[i4].Extensions, o.AppendEntriesRequest.Entries[i4].Extensions)
					}
				}
			}
		}
	}
	return &cp
}
