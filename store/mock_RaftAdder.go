// Code generated by mockery v2.41.0. DO NOT EDIT.

package store

import (
	consts "github.com/dhiaayachi/multiraft/consts"
	mock "github.com/stretchr/testify/mock"

	raft "github.com/hashicorp/raft"
)

// MockRaftAdder is an autogenerated mock type for the RaftAdder type
type MockRaftAdder struct {
	mock.Mock
}

// AddRaft provides a mock function with given fields: id
func (_m *MockRaftAdder) AddRaft(id consts.PartitionType) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for AddRaft")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(consts.PartitionType) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BootstrapCluster provides a mock function with given fields: conf, partition
func (_m *MockRaftAdder) BootstrapCluster(conf raft.Configuration, partition consts.PartitionType) raft.Future {
	ret := _m.Called(conf, partition)

	if len(ret) == 0 {
		panic("no return value specified for BootstrapCluster")
	}

	var r0 raft.Future
	if rf, ok := ret.Get(0).(func(raft.Configuration, consts.PartitionType) raft.Future); ok {
		r0 = rf(conf, partition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(raft.Future)
		}
	}

	return r0
}

// NewMockRaftAdder creates a new instance of MockRaftAdder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRaftAdder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRaftAdder {
	mock := &MockRaftAdder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
